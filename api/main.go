package main

import (
	_ "app/docs" // docs is generated by Swag CLI, 必須引用才能顯示 API 文件，不然會跳出 Fetch Error
	middleware "app/internal/middleware"
	"app/pkg/rxlog"
	std_convert "app/pkg/std/convert"
	"context"
	"net/http"
	"os"
	"os/signal"
	"regexp"
	"runtime"
	"syscall"
	"time"

	"github.com/gin-gonic/gin"
	swagger_files "github.com/swaggo/files"     // swagger embed files
	gin_swagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
)

// 程式進入點
// 這個函數會自動執行，不需要手動呼叫
// 此函數會在 init() 執行完後，才會執行
//* 因為 swagger-go 必須要在程式進入點才能正確生成 API 文件，所以這裡必須要放在 main() 上面。
//* 參考 https://github.com/swaggo/swag/blob/master/example/celler/main.go
//	@title			The Clock Tower API
//	@version		1.0
//	@description	這是時鐘塔的 API 文件，所有的 API 都會在這裡顯示。使用者可以在這裡測試 API。

//	@license.name	Apache 2.0
//	@license.url	http://www.apache.org/licenses/LICENSE-2.0.html

// @host		localhost:3003
// @BasePath	/
func main() {
	// 設定併發數量為 CPU 核心數
	threads := std_convert.Str2Int(os.Getenv("GIN_THREAD"), runtime.NumCPU())
	runtime.GOMAXPROCS(threads)

	// Gin 服務，並搭配設定檔。
	port := "3003"
	if _, e := regexp.MatchString(`^\d+$`, os.Getenv("GIN_PORT")); e == nil {
		port = os.Getenv("GIN_PORT")
	}

	srv := &http.Server{
		Addr: "0.0.0.0:" + port,
		// 要呼叫的調用程序，這裡要放 Gin.Engine
		Handler: NewServer(),
	}

	// 設定 buffer 是因為 0 有機會漏接訊號
	quit := make(chan os.Signal, 1)
	// kill 默認發送 syscall.SIGTERM 訊號
	// kill -2 發送 syscall.SIGINT 訊號(ctrl+c)
	// kill -9 發送 syscall.SIGKILL 訊號，無法被捕獲、阻塞或忽略
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	// 等待中斷信號以優雅地關閉服務
	go func() {
		sig := <-quit
		rxlog.With("signal", sig).Info("接收到關閉信號，正在關閉伺服器...")

		// 建立一個超時的 Context
		// 讓 Gin 在 5 秒內關閉伺服器
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		// 關閉伺服器
		if err := srv.Shutdown(ctx); err != nil {
			rxlog.With("error", err).Error("伺服器在關閉時發生錯誤。")
		}

		rxlog.Info("伺服器已經關閉。")
	}()

	// 啟動伺服器
	rxlog.With("port", port).With("threads", threads).Info("伺服器成功啟動，運行中...")
	if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		rxlog.With("error", err).Error("伺服器發生致命錯誤，必須終止運行。")
	}
}

func NewServer() *gin.Engine {
	// 初始化 Gin
	r := gin.New()

	// 設置 Gin 的中間件
	r.Use(middleware.LoggerToFile())
	r.Use(gin.Recovery())

	// 設置 CORS 中間件
	r.Use(middleware.Cors())

	// 註冊路由
	r = registerRouters(r)

	return r
}

// 註冊路由
func registerRouters(svr *gin.Engine) *gin.Engine {
	// 加入 swagger 網頁，用瀏覽器進入 /doc/index.html 可以看見所有 API
	svr.GET("/doc/*any", gin_swagger.WrapHandler(swagger_files.Handler))

	// api.RegisterSubRouter(&svr.RouterGroup)
	// mock_api.RegisterSubRouter(&svr.RouterGroup)
	return svr
}
